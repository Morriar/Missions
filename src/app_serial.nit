# This file is generated by nitserial
# Do not modify, but you can redef
module app_serial is
	no_warning("property-conflict")
end

import app
import serialization

redef class Deserializer
	redef fun deserialize_class(name)
	do
		# Module: app
		if name == "HashMap[String, Session]" then return new HashMap[String, Session].from_deserializer(self)
		if name == "HashMap2[String, Int, ConnectionListener]" then return new HashMap2[String, Int, ConnectionListener].from_deserializer(self)
		if name == "HashMap2[String, Int, Int]" then return new HashMap2[String, Int, Int].from_deserializer(self)
		if name == "Array[String]" then return new Array[String].from_deserializer(self)
		if name == "Array[Option]" then return new Array[Option].from_deserializer(self)
		if name == "HashMap[String, Option]" then return new HashMap[String, Option].from_deserializer(self)
		if name == "Array[Couple[String, String]]" then return new Array[Couple[String, String]].from_deserializer(self)
		if name == "Array[Route]" then return new Array[Route].from_deserializer(self)
		if name == "HashMap[String, String]" then return new HashMap[String, String].from_deserializer(self)
		if name == "Couple[String, String]" then return new Couple[String, String].from_deserializer(self)
		if name == "Array[Int]" then return new Array[Int].from_deserializer(self)
		if name == "Array[Match]" then return new Array[Match].from_deserializer(self)
		if name == "Array[nullable Match]" then return new Array[nullable Match].from_deserializer(self)
		if name == "Array[Session]" then return new Array[Session].from_deserializer(self)
		if name == "HashMap[String, HashMap[Int, ConnectionListener]]" then return new HashMap[String, HashMap[Int, ConnectionListener]].from_deserializer(self)
		if name == "HashMap[Int, ConnectionListener]" then return new HashMap[Int, ConnectionListener].from_deserializer(self)
		if name == "Array[ConnectionListener]" then return new Array[ConnectionListener].from_deserializer(self)
		if name == "Array[HashMap[Int, ConnectionListener]]" then return new Array[HashMap[Int, ConnectionListener]].from_deserializer(self)
		if name == "HashMap[String, HashMap[Int, Int]]" then return new HashMap[String, HashMap[Int, Int]].from_deserializer(self)
		if name == "HashMap[Int, Int]" then return new HashMap[Int, Int].from_deserializer(self)
		if name == "Array[HashMap[Int, Int]]" then return new Array[HashMap[Int, Int]].from_deserializer(self)
		if name == "HashMap[AppRoute, Handler]" then return new HashMap[AppRoute, Handler].from_deserializer(self)
		if name == "Array[Handler]" then return new Array[Handler].from_deserializer(self)
		if name == "Array[AppRoute]" then return new Array[AppRoute].from_deserializer(self)
		if name == "Array[Interface]" then return new Array[Interface].from_deserializer(self)
		if name == "Array[VirtualHost]" then return new Array[VirtualHost].from_deserializer(self)
		if name == "Array[Char]" then return new Array[Char].from_deserializer(self)
		if name == "Array[FlatText]" then return new Array[FlatText].from_deserializer(self)
		if name == "Array[FlatString]" then return new Array[FlatString].from_deserializer(self)
		if name == "Array[Byte]" then return new Array[Byte].from_deserializer(self)
		if name == "Array[MissionStar]" then return new Array[MissionStar].from_deserializer(self)
		return super
	end
end
